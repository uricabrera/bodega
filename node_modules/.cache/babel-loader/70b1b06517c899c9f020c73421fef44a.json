{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Urielitou\\\\WebstormProjects\\\\bodega\\\\src\\\\contexts\\\\CartContext.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useContext } from \"react\";\nimport { CounterContext } from \"./CounterContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [cart, setCart] = useState([]);\n  const {\n    counter,\n    setCounter\n  } = useContext(CounterContext); // I'm going to add different methods that will be definitely useful for interacting with the cart :D\n  // Voy a añadir diferentes métodos que definitivamente serán útiles para la interacción con el carrito ^-^\n\n  const clearCart = () => {\n    setCounter(0);\n    setCart([]);\n  };\n\n  const addProductToCart = (product, quantity) => {\n    let newCart = cart.filter(prod => prod.quantity > 0).map(prod => {\n      if (product.id === prod.id) {\n        prod.quantity = quantity;\n      }\n\n      return prod;\n    });\n\n    if (!newCart.some(prod => prod.id === product.id)) {\n      newCart.push({ ...product,\n        quantity: quantity\n      });\n    }\n\n    setCart(newCart);\n  };\n\n  const deleteProductFromCart = (id, quantity) => {\n    setCart(cart.filter(prod => prod.id !== id));\n    setCounter(amountOfProductsCart() - quantity);\n  };\n\n  const amountOfProductsCart = () => {\n    return cart.reduce((acc, prod) => acc + prod.quantity, 0);\n  };\n\n  const getTotalPrice = () => {\n    let totalPrice = 0;\n\n    for (let product of cart) {\n      totalPrice += product.totalForItem;\n    }\n\n    console.log(totalPrice);\n    return totalPrice;\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      setCart,\n      addProductToCart,\n      getTotalPrice,\n      clearCart,\n      deleteProductFromCart,\n      amountOfProductsCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"0fCf4kp3KUKlnEld+FwmiZXMBkU=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/Urielitou/WebstormProjects/bodega/src/contexts/CartContext.jsx"],"names":["createContext","useState","useContext","CounterContext","CartContext","CartProvider","children","cart","setCart","counter","setCounter","clearCart","addProductToCart","product","quantity","newCart","filter","prod","map","id","some","push","deleteProductFromCart","amountOfProductsCart","reduce","acc","getTotalPrice","totalPrice","totalForItem","console","log"],"mappings":";;;AACA,SAAQA,aAAR,EAAsBC,QAAtB,EAAgCC,UAAhC,QAAiD,OAAjD;AACA,SAAQC,cAAR,QAA6B,kBAA7B;;AAGA,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,EAAjC;AAEP,OAAO,MAAMK,YAAY,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AACxC,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBP,QAAQ,CAAC,EAAD,CAA/B;AAEA,QAAM;AAACQ,IAAAA,OAAD;AAASC,IAAAA;AAAT,MAAuBR,UAAU,CAACC,cAAD,CAAvC,CAHwC,CAKxC;AAEA;;AAGA,QAAMQ,SAAS,GAAG,MAAM;AACpBD,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAF,IAAAA,OAAO,CAAC,EAAD,CAAP;AACH,GAHD;;AAMA,QAAMI,gBAAgB,GAAG,CAACC,OAAD,EAASC,QAAT,KAAsB;AAC3C,QAAIC,OAAO,GAAGR,IAAI,CAACS,MAAL,CAAaC,IAAD,IAAUA,IAAI,CAACH,QAAL,GAAgB,CAAtC,EAAyCI,GAAzC,CAA8CD,IAAD,IAAU;AACjE,UAAIJ,OAAO,CAACM,EAAR,KAAeF,IAAI,CAACE,EAAxB,EAA4B;AACxBF,QAAAA,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACH;;AACD,aAAOG,IAAP;AACH,KALa,CAAd;;AAMA,QAAI,CAACF,OAAO,CAACK,IAAR,CAAcH,IAAD,IAAUA,IAAI,CAACE,EAAL,KAAYN,OAAO,CAACM,EAA3C,CAAL,EAAqD;AACjDJ,MAAAA,OAAO,CAACM,IAAR,CAAa,EACT,GAAGR,OADM;AAETC,QAAAA,QAAQ,EAAEA;AAFD,OAAb;AAIH;;AACDN,IAAAA,OAAO,CAACO,OAAD,CAAP;AACH,GAdD;;AAgBA,QAAMO,qBAAqB,GAAG,CAACH,EAAD,EAAIL,QAAJ,KAAiB;AAC3CN,IAAAA,OAAO,CAACD,IAAI,CAACS,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACE,EAAL,KAAYA,EAAhC,CAAD,CAAP;AACAT,IAAAA,UAAU,CAACa,oBAAoB,KAAKT,QAA1B,CAAV;AACH,GAHD;;AAKA,QAAMS,oBAAoB,GAAG,MAAM;AAC/B,WAAOhB,IAAI,CAACiB,MAAL,CAAY,CAACC,GAAD,EAAKR,IAAL,KAAcQ,GAAG,GAAGR,IAAI,CAACH,QAArC,EAA8C,CAA9C,CAAP;AACH,GAFD;;AAIA,QAAMY,aAAa,GAAG,MAAM;AACxB,QAAIC,UAAU,GAAG,CAAjB;;AAEA,SAAI,IAAId,OAAR,IAAmBN,IAAnB,EAAwB;AACpBoB,MAAAA,UAAU,IAAId,OAAO,CAACe,YAAtB;AACH;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AAEA,WAAOA,UAAP;AACH,GATD;;AAYA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACpB,MAAAA,IAAD;AAAMC,MAAAA,OAAN;AAAcI,MAAAA,gBAAd;AAA+Bc,MAAAA,aAA/B;AAA6Cf,MAAAA,SAA7C;AAAuDW,MAAAA,qBAAvD;AAA6EC,MAAAA;AAA7E,KAA7B;AAAA,cACKjB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA1DM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["\r\nimport {createContext,useState, useContext} from \"react\";\r\nimport {CounterContext} from \"./CounterContext\";\r\n\r\n\r\nexport const CartContext = createContext();\r\n\r\nexport const CartProvider = ({children}) => {\r\n    const [cart,setCart] = useState([]);\r\n\r\n    const {counter,setCounter} = useContext(CounterContext)\r\n\r\n    // I'm going to add different methods that will be definitely useful for interacting with the cart :D\r\n\r\n    // Voy a añadir diferentes métodos que definitivamente serán útiles para la interacción con el carrito ^-^\r\n\r\n\r\n    const clearCart = () => {\r\n        setCounter(0);\r\n        setCart([]);\r\n    }\r\n\r\n\r\n    const addProductToCart = (product,quantity) => {\r\n        let newCart = cart.filter((prod) => prod.quantity > 0).map((prod) => {\r\n            if (product.id === prod.id) {\r\n                prod.quantity = quantity;\r\n            }\r\n            return prod;\r\n        });\r\n        if (!newCart.some((prod) => prod.id === product.id)) {\r\n            newCart.push({\r\n                ...product,\r\n                quantity: quantity\r\n            });\r\n        }\r\n        setCart(newCart);\r\n    }\r\n\r\n    const deleteProductFromCart = (id,quantity) => {\r\n        setCart(cart.filter(prod => prod.id !== id))\r\n        setCounter(amountOfProductsCart() - quantity)\r\n    }\r\n\r\n    const amountOfProductsCart = () => {\r\n        return cart.reduce((acc,prod) => acc + prod.quantity,0)\r\n    }\r\n\r\n    const getTotalPrice = () => {\r\n        let totalPrice = 0;\r\n\r\n        for(let product of cart){\r\n            totalPrice += product.totalForItem;\r\n        }\r\n        console.log(totalPrice)\r\n\r\n        return totalPrice;\r\n    }\r\n\r\n\r\n    return(\r\n        <CartContext.Provider value={{cart,setCart,addProductToCart,getTotalPrice,clearCart,deleteProductFromCart,amountOfProductsCart}}>\r\n            {children}\r\n        </CartContext.Provider>\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}