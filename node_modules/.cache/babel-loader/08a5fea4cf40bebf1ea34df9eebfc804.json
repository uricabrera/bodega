{"ast":null,"code":"var _jsxFileName = \"/home/flavia/Documentos/Programacion/Florencia/bodega/src/contexts/UserContext.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState({\n    token: \"\",\n    datos: {}\n  }); // I'm going to add different methods that will be definitely useful for interacting with the user :D\n  // Voy a añadir diferentes métodos que definitivamente serán útiles para la interacción con usuarios ^-^\n\n  const setUserToken = token => {\n    setUser({ ...user,\n      token: token\n    });\n  };\n\n  const setUserDato = dato => {\n    let datoArray = Object.entries(dato);\n    setUser({ ...user,\n      datos: { ...user.datos,\n        [datoArray[0][0]]: datoArray[0][1]\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      setUser,\n      setUserToken,\n      setUserDato\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserProvider, \"NtgJdX9UStc6zIarDV8Wegz06Io=\");\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["/home/flavia/Documentos/Programacion/Florencia/bodega/src/contexts/UserContext.jsx"],"names":["createContext","useState","useContext","UserContext","UserProvider","children","user","setUser","token","datos","setUserToken","setUserDato","dato","datoArray","Object","entries"],"mappings":";;;AAAA,SAAQA,aAAR,EAAsBC,QAAtB,EAAgCC,UAAhC,QAAiD,OAAjD;;AAIA,OAAO,MAAMC,WAAW,gBAAGH,aAAa,EAAjC;AAEP,OAAO,MAAMI,YAAY,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AACxC,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBN,QAAQ,CAAC;AAC5BO,IAAAA,KAAK,EAAE,EADqB;AAE5BC,IAAAA,KAAK,EAAE;AAFqB,GAAD,CAA/B,CADwC,CAOxC;AAEA;;AAIA,QAAMC,YAAY,GAAIF,KAAD,IAAW;AAC5BD,IAAAA,OAAO,CAAC,EACJ,GAAGD,IADC;AAEJE,MAAAA,KAAK,EAAEA;AAFH,KAAD,CAAP;AAIH,GALD;;AAOA,QAAMG,WAAW,GAAIC,IAAD,IAAU;AAC1B,QAAIC,SAAS,GAAGC,MAAM,CAACC,OAAP,CAAeH,IAAf,CAAhB;AACAL,IAAAA,OAAO,CAAC,EACJ,GAAGD,IADC;AAEJG,MAAAA,KAAK,EAAE,EACH,GAAGH,IAAI,CAACG,KADL;AAEH,SAACI,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAD,GAAmBA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb;AAFhB;AAFH,KAAD,CAAP;AAOH,GATD;;AAYA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACP,MAAAA,IAAD;AAAMC,MAAAA,OAAN;AAAcG,MAAAA,YAAd;AAA2BC,MAAAA;AAA3B,KAA7B;AAAA,cACKN;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CArCM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import {createContext,useState, useContext} from \"react\";\n\n\n\nexport const UserContext = createContext();\n\nexport const UserProvider = ({children}) => {\n    const [user,setUser] = useState({\n        token: \"\",\n        datos: {}\n    });\n\n\n    // I'm going to add different methods that will be definitely useful for interacting with the user :D\n\n    // Voy a añadir diferentes métodos que definitivamente serán útiles para la interacción con usuarios ^-^\n\n\n\n    const setUserToken = (token) => {\n        setUser({\n            ...user,\n            token: token\n        })\n    }\n\n    const setUserDato = (dato) => {\n        let datoArray = Object.entries(dato)\n        setUser({\n            ...user,\n            datos: {\n                ...user.datos,\n                [datoArray[0][0]]: datoArray[0][1]\n            }\n        })\n    }\n\n\n    return(\n        <UserContext.Provider value={{user,setUser,setUserToken,setUserDato}}>\n            {children}\n        </UserContext.Provider>\n    );\n};"]},"metadata":{},"sourceType":"module"}